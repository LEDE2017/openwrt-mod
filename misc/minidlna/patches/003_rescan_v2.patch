diff -Naur c/inotify.c d/inotify.c
--- c/inotify.c	2016-10-09 07:21:38.914886365 +0800
+++ d/inotify.c	2016-10-09 07:26:20.862011247 +0800
@@ -17,7 +17,6 @@
  */
 #include "config.h"
 
-#ifdef HAVE_INOTIFY
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
@@ -29,6 +28,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/time.h>
+#ifdef HAVE_INOTIFY
 #include <sys/resource.h>
 #include <poll.h>
 #ifdef HAVE_SYS_INOTIFY_H
@@ -37,6 +37,7 @@
 #include "linux/inotify.h"
 #include "linux/inotify-syscalls.h"
 #endif
+#endif
 #include "libav.h"
 
 #include "upnpglobalvars.h"
@@ -49,6 +50,9 @@
 #include "playlist.h"
 #include "log.h"
 
+static time_t next_pl_fill = 0;
+
+#ifdef HAVE_INOTIFY
 #define EVENT_SIZE  ( sizeof (struct inotify_event) )
 #define BUF_LEN     ( 1024 * ( EVENT_SIZE + 16 ) )
 #define DESIRED_WATCH_LIMIT 65536
@@ -64,7 +68,6 @@
 
 static struct watch *watches;
 static struct watch *lastwatch = NULL;
-static time_t next_pl_fill = 0;
 
 char *get_path_from_wd(int wd)
 {
@@ -277,6 +280,7 @@
 
 	return(i);
 }
+#endif
 
 int
 inotify_insert_file(char * name, const char * path)
@@ -364,12 +368,21 @@
 		inotify_remove_file(path);
 		next_pl_fill = 1;
 	}
-	else if( ts < st.st_mtime )
+	else if( !ts )
+	{
+		DPRINTF(E_DEBUG, L_INOTIFY, "Adding: %s\n", path);
+	}
+	else if( ts != st.st_mtime )
 	{
-		if( ts > 0 )
-			DPRINTF(E_DEBUG, L_INOTIFY, "%s is newer than the last db entry.\n", path);
+		DPRINTF(E_DEBUG, L_INOTIFY, "%s is %s than the last db entry.\n", path, (ts < st.st_mtime) ? "older" : "newer");
 		inotify_remove_file(path);
 	}
+	else
+	{
+		if( ts == st.st_mtime )
+			DPRINTF(E_DEBUG, L_INOTIFY, "%s already exists\n", path);
+		return 0;
+	}
 
 	/* Find the parentID.  If it's not found, create all necessary parents. */
 	len = strlen(path)+1;
@@ -440,7 +453,6 @@
 	struct dirent * e;
 	char *id, *parent_buf, *esc_name;
 	char path_buf[PATH_MAX];
-	int wd;
 	enum file_types type = TYPE_UNKNOWN;
 	media_types dir_types = ALL_MEDIA;
 	struct media_dir_s* media_path;
@@ -453,27 +465,34 @@
 	}
 	if( sql_get_int_field(db, "SELECT ID from DETAILS where PATH = '%q'", path) > 0 )
 	{
+		fd = 0;
 		DPRINTF(E_DEBUG, L_INOTIFY, "%s already exists\n", path);
-		return 0;
 	}
-
- 	parent_buf = strdup(path);
-	id = sql_get_text_field(db, "SELECT OBJECT_ID from OBJECTS o left join DETAILS d on (d.ID = o.DETAIL_ID)"
-	                            " where d.PATH = '%q' and REF_ID is NULL", dirname(parent_buf));
-	if( !id )
-		id = sqlite3_mprintf("%s", BROWSEDIR_ID);
-	insert_directory(name, path, BROWSEDIR_ID, id+2, get_next_available_id("OBJECTS", id));
-	sqlite3_free(id);
-	free(parent_buf);
-
-	wd = add_watch(fd, path);
-	if( wd == -1 )
+	else
 	{
-		DPRINTF(E_ERROR, L_INOTIFY, "add_watch() failed\n");
+ 		parent_buf = strdup(path);
+		id = sql_get_text_field(db, "SELECT OBJECT_ID from OBJECTS o left join DETAILS d on (d.ID = o.DETAIL_ID)"
+	                            " where d.PATH = '%q' and REF_ID is NULL", dirname(parent_buf));
+		if( !id )
+			id = sqlite3_mprintf("%s", BROWSEDIR_ID);
+		insert_directory(name, path, BROWSEDIR_ID, id+2, get_next_available_id("OBJECTS", id));
+		sqlite3_free(id);
+		free(parent_buf);
 	}
-	else
+
+	if( fd > 0 )
 	{
-		DPRINTF(E_INFO, L_INOTIFY, "Added watch to %s [%d]\n", path, wd);
+		#ifdef HAVE_INOTIFY
+		int wd = add_watch(fd, path);
+		if( wd == -1 )
+		{
+			DPRINTF(E_ERROR, L_INOTIFY, "add_watch() failed\n");
+		}
+		else
+		{
+			DPRINTF(E_INFO, L_INOTIFY, "Added watch to %s [%d]\n", path, wd);
+		}
+		#endif
 	}
 
 	media_path = media_dirs;
@@ -615,7 +634,12 @@
 
 	/* Invalidate the scanner cache so we don't insert files into non-existent containers */
 	valid_cache = 0;
-	remove_watch(fd, path);
+	if( fd > 0 )
+	{
+		#ifdef HAVE_INOTIFY
+		remove_watch(fd, path);
+		#endif
+	}
 	sql = sqlite3_mprintf("SELECT ID from DETAILS where (PATH > '%q/' and PATH <= '%q/%c')"
 	                      " or PATH = '%q'", path, path, 0xFF, path);
 	if( (sql_get_table(db, sql, &result, &rows, NULL) == SQLITE_OK) )
@@ -639,6 +663,7 @@
 	return ret;
 }
 
+#ifdef HAVE_INOTIFY
 void *
 start_inotify()
 {
diff -Naur c/inotify.h d/inotify.h
--- c/inotify.h	2013-11-02 08:44:41.000000000 +0800
+++ d/inotify.h	2016-10-09 07:26:20.862011247 +0800
@@ -1,7 +1,16 @@
-#ifdef HAVE_INOTIFY
+int
+inotify_insert_file(char * name, const char * path);
+
+int
+inotify_insert_directory(int fd, char *name, const char * path);
+
 int
 inotify_remove_file(const char * path);
 
+int
+inotify_remove_directory(int fd, const char * path);
+
+#ifdef HAVE_INOTIFY
 void *
 start_inotify();
 #endif
diff -Naur c/minidlna.c d/minidlna.c
--- c/minidlna.c	2013-11-02 08:44:41.000000000 +0800
+++ d/minidlna.c	2016-10-09 07:26:20.863011272 +0800
@@ -349,12 +349,13 @@
 	if (ret != 0)
 	{
 rescan:
+		rescan_db = 0;
 		if (ret < 0)
 			DPRINTF(E_WARN, L_GENERAL, "Creating new database at %s/files.db\n", db_path);
 		else if (ret == 1)
-			DPRINTF(E_WARN, L_GENERAL, "New media_dir detected; rescanning...\n");
+			DPRINTF(E_WARN, L_GENERAL, "New media_dir detected; rebuilding...\n");
 		else if (ret == 2)
-			DPRINTF(E_WARN, L_GENERAL, "Removed media_dir detected; rescanning...\n");
+			DPRINTF(E_WARN, L_GENERAL, "Removed media_dir detected; rebuilding...\n");
 		else
 			DPRINTF(E_WARN, L_GENERAL, "Database version mismatch; need to recreate...\n");
 		sqlite3_close(db);
@@ -366,6 +367,9 @@
 		open_db(&db);
 		if (CreateDatabase() != 0)
 			DPRINTF(E_FATAL, L_GENERAL, "ERROR: Failed to create sqlite database!  Exiting...\n");
+	}
+	if (ret != 0 || rescan_db == 1)
+	{
 #if USE_FORK
 		scanning = 1;
 		sqlite3_close(db);
@@ -797,6 +801,9 @@
 		case 'h':
 			runtime_vars.port = 0; // triggers help display
 			break;
+		case 'r':
+			rescan_db = 1;
+			break;
 		case 'R':
 			snprintf(buf, sizeof(buf), "rm -rf %s/files.db %s/art_cache", db_path, db_path);
 			if (system(buf) != 0)
@@ -842,9 +849,9 @@
 			"\t\t[-t notify_interval] [-P pid_filename]\n"
 			"\t\t[-s serial] [-m model_number]\n"
 #ifdef __linux__
-			"\t\t[-w url] [-R] [-L] [-S] [-V] [-h]\n"
+			"\t\t[-w url] [-r] [-R] [-L] [-S] [-V] [-h]\n"
 #else
-			"\t\t[-w url] [-R] [-L] [-V] [-h]\n"
+			"\t\t[-w url] [-r] [-R] [-L] [-V] [-h]\n"
 #endif
 		        "\nNotes:\n\tNotify interval is in seconds. Default is 895 seconds.\n"
 			"\tDefault pid file is %s.\n"
@@ -852,7 +859,8 @@
 			"\t-w sets the presentation url. Default is http address on port 80\n"
 			"\t-v enables verbose output\n"
 			"\t-h displays this text\n"
-			"\t-R forces a full rescan\n"
+			"\t-r forces a rescan\n"
+			"\t-R forces a rebuild\n"
 			"\t-L do not create playlists\n"
 #ifdef __linux__
 			"\t-S changes behaviour for systemd\n"
diff -Naur c/scanner.c d/scanner.c
--- c/scanner.c	2013-11-02 08:44:41.000000000 +0800
+++ d/scanner.c	2016-10-09 07:28:28.531400612 +0800
@@ -45,6 +45,7 @@
 #include "scanner.h"
 #include "albumart.h"
 #include "log.h"
+#include "inotify.h"
 
 #if SCANDIR_CONST
 typedef const struct dirent scan_filter;
@@ -779,6 +780,68 @@
 	}
 }
 
+/* rescan functions added by shrimpkin@sourceforge.net */
+static int
+cb_orphans(void *args, int argc, char **argv, char **azColName)
+{
+	struct stat file;
+	char *path = argv[0], *mime = argv[1];
+	
+	/* If we can't stat path, remove it */
+	if (stat(path, &file) != 0)
+	{
+		DPRINTF(E_DEBUG, L_SCANNER, "Removing %s [%s]!\n", path, (mime) ? "file" : "dir");
+		if (mime)
+		{
+			inotify_remove_file(path);
+		}
+		else
+		{
+			inotify_remove_directory(0, path);
+		}
+	}
+	return 0;
+}
+
+void
+start_rescan()
+{
+	struct media_dir_s *media_path;
+	char path[MAXPATHLEN], buf[MAXPATHLEN], *esc_name = NULL, *zErrMsg;
+	char *sql_files = "SELECT path, mime FROM details WHERE path NOT NULL AND mime IS NOT NULL;", *sql_dir = "SELECT path, mime FROM details WHERE path NOT NULL AND mime IS NULL;";
+	int ret;
+
+	DPRINTF(E_INFO, L_SCANNER, "Starting rescan\n");
+
+	/* Find and remove any dead directory links */
+	ret = sqlite3_exec(db, sql_dir, cb_orphans, NULL, &zErrMsg);
+	if (ret != SQLITE_OK)
+	{
+		DPRINTF(E_MAXDEBUG, L_SCANNER, "SQL error: %s\nBAD SQL: %s\n", zErrMsg, sql_dir);
+		sqlite3_free(zErrMsg);
+	}
+	
+	/* Find and remove any dead file links */
+	ret = sqlite3_exec(db, sql_files, cb_orphans, NULL, &zErrMsg);
+	if (ret != SQLITE_OK)
+	{
+		DPRINTF(E_MAXDEBUG, L_SCANNER, "SQL error: %s\nBAD SQL: %s\n", zErrMsg, sql_files);
+		sqlite3_free(zErrMsg);
+	}
+	
+	/* Rescan media_paths for new and/or modified files */
+	for (media_path = media_dirs; media_path != NULL; media_path = media_path->next)
+	{
+		strncpyt(path, media_path->path, sizeof(path));
+		strncpyt(buf, media_path->path, sizeof(buf));
+		esc_name = escape_tag(basename(buf), 1);
+		inotify_insert_directory(0, esc_name, path);
+		free(esc_name);
+	}
+	DPRINTF(E_INFO, L_SCANNER, "Rescan completed\n");
+}
+/* end rescan functions */
+
 void
 start_scanner()
 {
@@ -797,6 +860,13 @@
 
 	av_register_all();
 	av_log_set_level(AV_LOG_PANIC);
+        
+	if( rescan_db )
+	{
+		start_rescan();
+		return;
+	}
+	
 	while( media_path )
 	{
 		int64_t id;
diff -Naur c/upnpglobalvars.c d/upnpglobalvars.c
--- c/upnpglobalvars.c	2013-11-02 08:44:41.000000000 +0800
+++ d/upnpglobalvars.c	2016-10-09 07:29:22.525298844 +0800
@@ -92,3 +92,4 @@
 short int scanning = 0;
 volatile short int quitting = 0;
 volatile uint32_t updateID = 0;
+short int rescan_db = 0;
diff -Naur c/upnpglobalvars.h d/upnpglobalvars.h
--- c/upnpglobalvars.h	2016-10-09 07:10:39.000000000 +0800
+++ d/upnpglobalvars.h	2016-10-09 07:30:23.335385818 +0800
@@ -235,5 +235,6 @@
 extern short int scanning;
 extern volatile short int quitting;
 extern volatile uint32_t updateID;
+extern short int rescan_db;
 
 #endif
